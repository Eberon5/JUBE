# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PIP_DEPENDENCIES: "sphinx ruamel.yaml"
    GIT_DEPTH: 1                              # Create a shallow copy
    BOT_NAME: "GitLab Runner Bot"             # Bot's name that appears in the commit log
    BOT_EMAIL: "jube@fz-juelich.de"           # Bot's email, not important

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
    paths:
        - .cache/pip

stages:
    - prepare
    - build
    - tests
    - deploy

dependencies:
    stage: prepare
    script:
        - python3.11 -V  # Print out python version for debugging
        # Dependencies:
        - pip3 install $PIP_DEPENDENCIES
        # Checking installed packages and their versions
        - pip3 list
        # PATH required for tests
        - export PYTHONPATH=${CI_PROJECT_DIR}/jube:${PYTHONPATH}

.clone_repo: &clone_repo
    before_script:
        # Cloning to a new folder to avoid caching issues
        - rm -r "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}" || true
        - cd ${CI_PROJECT_DIR}
        - git clone https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@} "${CI_JOB_NAME#*:}"
        # Using bot information
        - git config pull.rebase false
        - git config --global user.name "${BOT_NAME}"
        - git config --global user.email "${BOT_EMAIL}"
        # Changing cloned repo to current branch
        - cd "${CI_JOB_NAME#*:}"
        - git checkout ${CI_COMMIT_BRANCH}

.push_files: &push_files
    <<: *clone_repo
    after_script:
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}"
        - git status
        # Add list of files and commit, if there are changes
        - |
            if [[ -z $(git status --untracked-files=no --porcelain) ]]
            then 
                echo "Nothing to commit"
            else
                git diff
                git add ${FILE_LIST}
                git commit -m "${COMMIT_MESSAGE} (Runner ID:${CI_RUNNER_ID})"
                git push -o ci.skip https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}
            fi
        # Cleaning up
        - cd ${CI_PROJECT_DIR}
        - rm -r "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}"

build:year:
    variables:
        FILE_LIST: -u
        COMMIT_MESSAGE: "Updating Year"
    stage: build
    script:
        # Updating all Copyright years
        - find ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:} -type f -exec sed -i "s/Copyright (C) 2008-[0-9]\{4\}/Copyright (C) 2008-`date +%Y`/g" {} \;
        # Updating years on documentation
        - sed -i "s/[0-9]\{4\}, JUBE Developer Team/`date +%Y`, JUBE Developer Team/g" ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs/conf.py
    <<: *push_files
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
    resource_group: gitpush

build:version:
    variables:
        FILE_LIST: jube/conf.py docs/conf.py setup.py
        COMMIT_MESSAGE: "Updating Version"
    stage: build
    script:
        - export RELEASE=`grep -o -m1 -P "Version \d.\d.\d(-[^ ]+)?" docs/release_notes.rst | cut -d " " -f2`
        - export VERSION=${RELEASE%.*}
        - |
            echo "Last version on docs/release_notes.rst: ${RELEASE}"
        # Updating version in files
        - |
            sed -i "s/'version': '.*'/'version': '${RELEASE}'/g" ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/setup.py
        - sed -i "s/JUBE_VERSION = \".*\"/JUBE_VERSION = \"${RELEASE}\"/g" ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/jube/conf.py
        - sed -i "s/version = '.*'/version = '${VERSION}'/g" ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs/conf.py
        - sed -i "s/release = '.*'/release = '${RELEASE}'/g" ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs/conf.py
    <<: *push_files
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
          changes:
            - docs/release_notes.rst
    resource_group: gitpush

build:release_notes:
    variables:
        FILE_LIST: RELEASE_NOTES
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs"
        - make update_release
    <<: *push_files
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
          changes:
            - docs/release_notes.rst
    resource_group: gitpush

build:help:
    variables:
        FILE_LIST: jube/help.txt
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs"
        - make update_help
    <<: *push_files
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
          changes:
            - docs/glossar.rst
    resource_group: gitpush

build:pdf:
    variables:
        FILE_LIST: docs/JUBE.pdf
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/docs"
        - make latexpdf
    <<: *push_files
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
          changes:
            - docs/**/* # all files under folder 'docs'
    resource_group: gitpush

build:site:
    stage: build
    script:
        - cd docs
        - make html
    artifacts:
        paths:
            - docs/_build/html
    rules:
        - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
          changes:
            - docs/**/* # all files under folder 'docs'


.run_test: &run_test
    stage: tests
    script:
        - cd ${CI_PROJECT_DIR}/tests/
        - export PYTHONPATH=${CI_PROJECT_DIR}:${PYTHONPATH}
        - python3.11 ${CI_JOB_NAME#*:}.py 2>&1 | tee output
        - if [[ ! -z $(grep "Warning\|warning" output) ]] ; then echo "Warnings in the output" ; exit 21 ; fi
    allow_failure:
        exit_codes: 21

tests:parameter_tests:
    <<: *run_test

tests:multiprocessing_tests:
    <<: *run_test

tests:pattern_tests:
    <<: *run_test

tests:benchmark_tests:
    <<: *run_test

tests:result_database_tests:
    <<: *run_test

tests:examples_tests:
    <<: *run_test

tests:yaml_tests:
    <<: *run_test

tests:xml_tests:
    <<: *run_test

tests:step_tests:
    <<: *run_test

tests:util_tests:
    <<: *run_test

tests:conf_tests:
    <<: *run_test

tests:substitute_tests:
    <<: *run_test

deploy:dist_package:
    stage: deploy
    <<: *clone_repo
    script:
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}"
        - git status
        # Creating distribution package tarball
        - python3.11 setup.py sdist
    after_script:
        - echo "Copying distribution package to web server"
        - cd "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}"
        - "sshpass -e -P 'passphrase for key' rsync -rlgoDzP --del dist/* apps_jube_docu:software/"
        # Cleaning up
        - cd ${CI_PROJECT_DIR}
        - rm -r "${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}"
    artifacts:
        paths:
            - ${CI_PROJECT_DIR}/${CI_JOB_NAME#*:}/dist/*
    rules:
        - if: $CI_COMMIT_TAG =~ /^REL-.*/

deploy:download_page:
    stage: deploy
    needs: 
        - deploy:dist_package
    before_script:
        - echo "Getting 'download.php' from web server"
        - "sshpass -e -P 'passphrase for key' rsync -rlgoDzP apps_jube_get_download_file:download.php ./"
    script:
        - export RELEASE=${CI_COMMIT_TAG#*-}
        - sed -i "s/^\$current_version = \"[0-9].[0-9].[0-9]\";/\$current_version = \"${RELEASE}\";/" download.php
        - sed -i "s/^\$versions = array(\(.*\));$/\$versions = array(\1,\"${RELEASE}\");/" download.php
        - sed -i "s/^\$published_versions = array(/\$published_versions = array(\"${RELEASE}\",/" download.php
        - echo ${RELEASE} > version
    after_script:
        - echo "Copying distribution package to web server"
        - "sshpass -e -P 'passphrase for key' rsync -rlgoDzP --del download.php version apps_jube_docu:"
    rules:
        - if: $CI_COMMIT_TAG =~ /^REL-.*/

pages:
    stage: deploy
    needs: 
        - build:site
    script:
        - mkdir -p public
        - cp -r docs/_build/html/* public/
    artifacts:
        paths:
            - public
    rules:
        - if: $CI_PIPELINE_SOURCE != 'merge_request_event'
          changes:
            - docs/**/* # all files under folder 'docs'

pages:production:
    stage: deploy
    needs: 
        - build:site
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"' # Only on the master branch
          when: manual # Manually triggered
          changes:
            - docs/**/* # all files under folder 'docs'
        - if: $CI_COMMIT_TAG =~ /^REL-.*/
    script:
        - echo "Deploying to production"
        - "sshpass -e -P 'passphrase for key' rsync -rlgoDzP --del docs/_build/html/* apps_jube_docu:docu/"
    environment:
        name: production
        url: https://apps.fz-juelich.de/jsc/jube/jube/docu/
