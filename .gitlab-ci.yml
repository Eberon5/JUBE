# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PIP_DEPENDENCIES: "sphinx ruamel.yaml"
    GIT_DEPTH: 1                              # Create a shallow copy
    BOT_NAME: "GitLab Runner Bot"             # Bot's name that appears in the commit log
    BOT_EMAIL: "jube@fz-juelich.de"           # Bot's email, not important

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
    paths:
        - .cache/pip

stages:
    - tests
    - build
    - deploy

before_script:
    - python3 -V  # Print out python version for debugging
    # Dependencies:
    - pip3 install $PIP_DEPENDENCIES
    # Checking installed packages and their versions
    - pip3 list
    # PATH required for tests
    - export PYTHONPATH=jube2:$PYTHONPATH

tests:
    stage: tests
    script:
        - python3 tests/run_all_tests.py

.push_files: &push_files
    after_script:
        - git fetch
        - git checkout ${CI_COMMIT_BRANCH}
        - |
            # Check if we have modifications to commit
            CHANGES=$(git status --porcelain | wc -l)
            if [ "$CHANGES" -gt "0" ]; then
                # Show the status of files that are about to be created, updated or deleted
                git status
                git config --global user.name "${BOT_NAME}"
                git config --global user.email "${BOT_EMAIL}"
                git add ${FILE_LIST}
                git commit -m "${COMMIT_MESSAGE} (Runner ID:${CI_RUNNER_ID})"
                git push -o ci.skip https://gitlab-ci-token:${GIT_PUSH_TOKEN}@gitlab.jsc.fz-juelich.de/cstao/jube.git
            else
                echo "No changes, nothing to commit"

build:release_notes:
    variables:
        FILE_LIST: RELEASE_NOTES
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd docs
        - make update_release
    <<: *push_files
    rules:
        - changes:
            - docs/release_notes.rst

build:help:
    variables:
        FILE_LIST: jube2/help.txt
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd docs
        - make update_help
    <<: *push_files
    rules:
        - changes:
            - docs/glossar.rst

build:pdf:
    variables:
        FILE_LIST: docs/JUBE.pdf
        COMMIT_MESSAGE: "Updating $FILE_LIST"
    stage: build
    script:
        - cd docs
        - make latexpdf
    <<: *push_files
    rules:
        - changes:
            - docs/**/* # all files under folder 'docs'

build:site:
    stage: build
    script:
        - cd docs
        - make html
    artifacts:
        paths:
            - docs/_build/html
    rules:
        - changes:
            - docs/**/* # all files under folder 'docs'

pages:
    stage: deploy
    needs: 
        - build:site
    script:
        - mkdir -p public
        - cp -r docs/_build/html/* public/
    artifacts:
        paths:
            - public
    rules:
        - changes:
            - docs/**/* # all files under folder 'docs'
